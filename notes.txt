npm does not stand for Node Package Manager.

What is the responsibility of npm?
--> npm is responsible of managing different packages.

Why npm is required?
--> We need several helper packages to be used in our react project. To install and manage those packages we need npm.

What is package?
--> Package is a piece of code written by some other developer which we can use for our ease of development.

What is dependency?
--> Dependency means the package that our app is dependent on.

What is devDependency?
--> The dependency which is required in development mode only.

What is the sign ^
--> This is known as caret.
In a package.json file, the caret (^) and tilde (~) characters are used to specify the version range of a dependency.

The caret symbol (^) indicates that you allow updates that are backward compatible with the current version of the package. For example, if you specify "^2.1.0" as the version for a dependency, you allow updates up to version 2.9999.9999, but not version 3.0.0 or higher.

On the other hand, the tilde symbol (~) indicates that you allow updates that include only patch-level changes. For example, if you specify "~2.1.0" as the version for a dependency, you allow updates up to version 2.1.9999, but not version 2.2.0 or higher.

If we don't mention either of the symbol, that indicates we don't want any update, we just want that particular version.


What is parcel?
--> Parcel is a bundler just like webpack. We need a bundler to bundle our app and make it deployable in production.
create-react-app uses webpack as bundler under the hood. Here we'll use parcel. We need Parcel only in development mode to create the minified build only, so we need to install it as a devDependency.


what is the significance of package-lock.json file?
--> To know what exact version of a dependency is used in production, we need package-lock.
The package-lock.json file is used by npm to keep track of the exact version of each installed package and its dependencies. It is created automatically when you run npm install and contains a detailed record of the tree of dependencies for your project.

The package-lock.json file serves several important purposes:

Reproducible builds: The file ensures that the exact same versions of dependencies are installed on all machines, which is crucial for achieving reproducible builds.

Faster installs: The file contains metadata that allows npm to avoid unnecessary network requests and install packages more quickly.

Dependency resolution: The file helps npm resolve conflicts between different versions of dependencies.

Security: The file helps ensure that you're not installing malicious or compromised packages, by verifying the integrity of each package downloaded.

It's important to include the package-lock.json file in your version control system so that others can reproduce the same environment and build your application in the same way. Additionally, when you run npm ci, npm installs packages based solely on the package-lock.json file, ensuring that you always have the exact same dependencies installed.



does package.json and package-lock.json always contain same version?
--> No, the package.json and package-lock.json files can contain different versions for the same package.

The package.json file specifies the desired version range for each package, which allows for updates within that range. For example, a package.json file might specify a dependency on version ^1.0.0, which allows for updates up to version 1.x.x, but not 2.0.0.

On the other hand, the package-lock.json file specifies the exact version of each package that was installed, including all of its dependencies, based on the version range specified in package.json. This ensures that everyone working on the project is using the exact same set of dependencies and their dependencies, and avoids version conflicts.

If you modify the package.json file by changing the version range of a package, or adding/removing a package, you will need to run npm install to generate a new package-lock.json file that reflects those changes. Running npm install will also update the installed packages to the latest version within the specified version range.

It's important to keep both package.json and package-lock.json files in sync and commit them to version control, so that all collaborators on the project can have a consistent environment and build the application in the same way.



What is node_modules?
--> It is kind of database for npm.

What is npx?
--> execute using npm

When we write 'npx parcel index.html' it creates a development build and host it on a server(localhost).
When we write 'npx parcel build index.html' it creates a production build. that production build is put inside 'dist' folder.
'dist' folder contains index.html, one minified .js file and one minified .css file.

How UI reflects changes immediately after we save the code, even before reloading the page?
--> This is done due to the concept of Hot Module Replacement. Parcel(bundlers) does this for us.
File watcher Algorithm(written in C++) is used to know about which file has changed in real time and it tells the server to reload.


What all Parcel can do?
-->
Create a server
HMR
Bundling
Minify
Dev and Production build
Super fast build Algorithm
Image Optimization
Caching while development (if we delete .parcel-cache folder, then build will take longer time, but after that build will take lesser time because it is cached)
Compression (the variable names given by us is compressed to small names in the minified file)
Compatiable with older versions of browsers
HTTPS on dev (npx parecel index.html --https)

Should we push .parcel-cache folder in GIT?
--> No. Rather we should add it in .gitignore file. Anything that can be auto generated in server should be kept into gitignore.

Why React is so fast?
--> React uses Virtual DOM. This is not the only thing that makes React faster. The bundlers also play major role.
The bundler alone is also not doing everything by its own, it also uses other dependencies under the hood.


What is Transitive Dependency?
--> When we need to make our app production ready, we need to do so many yhings like caching, minification, compression etc.
React can't do all these alone, for this we need help of other dependencies(Parcel). and those dependencies also use other dependencies.
This chain of dependencies is known as Transitive Dependency.


What is JSX?
--> JSX is not HTML inside javascript file. It is HTML like syntax inside JS file which is ultimately converted to React.createElement by Babel.
JSX => React.createElement => Object => rendered as HTML(DOM)
We can write any piece of JS Expression inside {} within JSX, but not JS Statements.


Where from Babel came into our project?
--> It came along with Parcel as its dependency. We did not manually install Babel, so it is not present in our package.json. But it is present in node_modules as well as in the package-lock.json file inside the node_modules.


We can place any piece of javascript inside JSX wrapping it by {}. Suppose we have a api call and that api got hacked and the api call returned some malicious code. This attack is known by XSS attack.
Some hacker put their js into your website, if hacker can run javascript code in your browser then he can hack many information like ip,password,location etc.
Now we are placing the returned response in our JSX. Bt JSX takes care of it. It is very safe. Give any data to JSX, JSX sanitizes it. JSX will escape malicious data first and it will make sure that your app is safe from XSS attack.


What is Component Composition?
--> If we use a component inside another component, that is known as Component Composition or Composing Components.

What is Virtual DOM?
--> Virtual DOM is the representation of the actual DOM.

Why React is fast?
--> React uses Virtual DOM. Whenever there is any change in code/data it compares the actual and virtual DOM and only re-renders that specific portion in UI which has changed.
It does not re-render the entire UI. this process is known as Reconciliation and it uses diff Algorithm. 

Diff algorithm is written in "react" or "react-dom"?
--> "react". React Native also uses the same diff algorithm from "react" library.



Monolith vs Microservices
-->One big application maintaining everything. For ex: backend, ui, apis everything written in one java project. This is known as Monolithic Architechture.

Small small apps maintaining different portions. For ex: auth service, user service, cart service.
Benefit is: Easy to maintain, easy to test, easy to deploy, separation of concerns(UI team is not concerned about backend and vice versa)
Every service is maintained by separate team and they are focused to only that service. This is known as Microservices Architechture.



Shimmer Effect/Shimmer UI
--> A Shimmer UI resembles the page's actual UI.
Shimmer effects are loading indicattors used when fetching data from a data source that can either be local or remote.


In useEffect hook what if we don't pass any dependency array as 2nd argument?
--> The function inside useEffect will be called on every render. Initial render as well as whenever any state changes.

Never create a component inside a component.

Why CDN is great place to host your images?
--> In real world applications images are mostly used from CDN , instead of keeping then in assets folder in react app.
because CDN are faster, CDN caches your images, cdn returns very fast, it has 100% up time, it optimizes things.
In cdn we can not optimize our images after it comes to our browser, we put in optimized images on cdn.


Formik is a good package to handle forms in React.


There are 2 types of routing.
Server Side Routing and Client Side Routing

Server Side Routing is the way where all our pages come from server. In older days when we used to have separate html pages like home.html, about.html, contact.html every page used to be served from server.
React is a Single page Application(SPA), it has only one html page. Whenver we change route it does not make any network call.


In case of nested routing we need to pass children in createBrowserRouter. All the children will go into <Outlet/> according to the route.